#######################################################################
#
# sam_:
#
post_src_install() {
  # sam_: meson hook
  (
    if grep -q 'internal compiler error' "${WORKDIR}"/*/config.log &> /dev/null ; then
      echo "${CATEGORY}/${PF}: Found ICE in config.log?!"
    fi

    if [[ -f "${S}"/meson.build ]] && ! grep -q "dev-build/meson" <<< "${BDEPEND}" ; then
      echo "${CATEGORY}/${PF}: meson.build found but ebuild doesn't use meson?"
    fi

    if grep -r -q "dejagnu" "${S}" &> /dev/null && ! grep -q "dejagnu" <<< "${BDEPEND}" ; then
      echo "${CATEGORY}/${PF}: Missing dejagnu tests?"
    fi

    if grep -r -q "test" "${S}/meson_options.txt" &> /dev/null && ! grep -q "test" <<< "${IUSE}" ; then
      echo "${CATEGORY}/${PF}: Missing test option wiring for meson?"
    fi

    if grep -E -r -q -- "(disable|enable|with(out)?)-(unit)?test(s?)" configure.ac &> /dev/null && ! grep -q "test" <<< "${IUSE}" ; then
      echo "${CATEGORY}/${PF}: Missing test option wiring for autoconf?"
    fi

    if grep -E -r -q -- "(disable|enable)-valgrind" configure.ac &> /dev/null && ! grep -q "valgrind" <<< "${IUSE}" ; then
      echo "${CATEGORY}/${PF}: Missing valgrind option wiring for autoconf?"
    fi

    if grep -r -q "valgrind" "${S}/meson_options.txt" &> /dev/null && ! grep -q "valgrind" <<< "${IUSE}" ; then
      echo "${CATEGORY}/${PF}: Missing valgrind option wiring for meson?"
    fi

    if grep -E -r -q -- "(disable|enable)-fuzz" configure.ac &> /dev/null && ! grep -q "fuzz" <<< "${EBUILD}" ; then
      echo "${CATEGORY}/${PF}: Missing fuzz option wiring for autoconf?"
    fi

    if grep -r -q "fuzz" "${S}/meson_options.txt" &> /dev/null && ! grep -q "fuzz" <<< "${EBUILD}" ; then
      echo "${CATEGORY}/${PF}: Missing fuzz option wiring for meson?"
    fi
  ) &>>/var/tmp/sam.txt

  (
    # from https://gist.githubusercontent.com/thesamesam/8352bbf45b0be2e7d910179b57ac4bc5/raw/a4cbf9dc7112bcd17c0d2db3b26a7a4e792389b1/gistfile1.txt

    # The situation with CMake is a mess because there's no 'meson_options.txt'-equivalent.
    # We also need to care here for multibuild / multilib, so let's try find
    # CMakeCache.txt.
    # TODO: Exclude cases where BUILD_TESTING appears in the ebuild, as
    # it may be intentionally off?
    if has cmake ${INHERITED} && [[ ${IUSE} != *test* ]] ; then
            while read -rd '' ; do
                    cp "${REPLY}" "${T}/sam-qa-check.tmp"
                    sed -i -e '/CTEST_COMMAND/d' "${T}/sam-qa-check.tmp"
                    if grep -q "TEST" "${T}/sam-qa-check.tmp" ; then
                            eqawarn "Missing CMake test option in ${REPLY}?"
                            break
                    fi
            done < <(find "${WORKDIR}" -iname 'CMakeCache.txt' -type f -print0)
    fi

    # Detect the "has tests, but ctest isn't wired up" case.
    if has cmake ${INHERITED} ; then
            if grep -q "No tests found. Skipping." ${T}/build.log ; then
                    eqawarn "Missing CMake ctest wiring?"
            fi
    fi
  ) &>>/var/tmp/sam.txt
}

#######################################################################
#
# tinderbox: If load is too high, then wait or bail out

__tinderbox_checkSTOP() {
  if [[ -f /var/tmp/tb/EOL || -f /var/tmp/tb/STOP ]]; then
    exit 42
  fi
}

case ${EBUILD_PHASE} in
  setup|unpack|prepare|configure|compile)
    # wait if these limits are reached
    vcpu= # actual value will be set/replaced by nproc output during setup
    load= # 1-minute-load limit

    while [[ $(grep "^procs_running " /proc/stat | cut -f 2 -d ' ') -gt $vcpu || $(cut -f 1 -d '.' /proc/loadavg) -gt $load ]]; do
      __tinderbox_checkSTOP
      touch /var/tmp/tb/WAIT
      sleep $((RANDOM % 10 + 10))
      rm /var/tmp/tb/WAIT
    done
    __tinderbox_checkSTOP
  ;;
esac
